type Query {
    users(query:String):[User!]!
    me : User!
    posts : [Post!]!
    comments : [Comment!]!
}
type Mutation{
    createUser(data : CreateUserInput!): User!
    deleteUser(id: ID!): User!
    updateUser(id: ID!, data: UpdateUserInput! ): User!
    createPost(data : CreatePostInput!): Post!
    updatePost(id: ID!, data: UpdatePostInput! ):Post!
    deletePost(id: ID!):Post!
    createComment(data : CreateCommentInput!): Comment!
    updateComment(id:ID!, data: UpdateCommentInput!) : Comment!
    deleteComment(id:ID!):Comment!
}
type Subscription{
    count: Int!
    comment(postid:ID!): CommentSubscripttionPayload!
    post : PostSubscripttionPayload!
}

input CreateUserInput{
    name:String!
    email:String!
    age: Int
}
input CreatePostInput{
    title: String!
    body:String!
    published: Boolean!
    author: ID!
}
input CreateCommentInput{
    text:String!
    author:ID!
    post:ID!
}

input UpdateUserInput{
    name:String
    email:String
    age: Int
}
input UpdatePostInput{
    title: String
    body:String
    published: Boolean
}
input UpdateCommentInput{
    text:String
}
type User {
    id : ID!
    email : String!
    name : String!
    age : Int
    posts : [Post!]!
    comments : [Comment!]!
}
type Post {
    id : ID!
    title:String!
    body:String!
    published:Boolean!
    author : User!
    comments : [Comment!]!
}
type Comment{
    id:ID!
    text:String!
    author : User!
    post: Post!
}

enum MutationType{
    CREATED
    UPDATED
    DELETED
}
type PostSubscripttionPayload{
    mutation : MutationType!
    data : Post!
}

type CommentSubscripttionPayload{
    mutation : MutationType!
    data : Comment!
}